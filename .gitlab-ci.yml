include:
  - project: 'cloudybay/cb-ci-templates'
    ref: master
    file: '/templates/.gitlab-ci.yml'

variables:
  HOST_PROJECT_DIR: /opt/CloudyBay/{{ repository_name }}

  GIT_SUBMODULE_STRATEGY: normal
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  BASE_CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:base

build:
  image: docker:23.0.6
  stage: build
  variables:
    GIT_STRATEGY: clone
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    CI_PRE_CLONE_SCRIPT: umask 0022
  services:
    - name: docker:23.0.6-dind
      command: ["--registry-mirror", "http://runner.cb:5000"]
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY_IMAGE
  script:
    - echo "build $BASE_CONTAINER_IMAGE"
    - docker build --target=base -t $BASE_CONTAINER_IMAGE .
    - echo "push $BASE_CONTAINER_IMAGE"
    - docker push $BASE_CONTAINER_IMAGE

    - echo "build $CONTAINER_IMAGE"
    - docker build --target=source -t $CONTAINER_IMAGE .
    - echo "push $CONTAINER_IMAGE"
    - docker push $CONTAINER_IMAGE
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        DEPLOY_ENV: "prod"
    - if: '$CI_COMMIT_BRANCH == "master"'
      variables:
        DEPLOY_ENV: "staging"
  tags:
    - gpu.cb
    - docker

# test:
#   extends: .test

scanner:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  tags:
    - gpu.cb
    - docker

staging:
  stage: deploy
  image: python:3.10-slim-buster
  variables:
    CI_PRE_CLONE_SCRIPT: umask 0022
  script:
    - apt-get update && apt-get install -y sshpass ssh
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p $TARGET_SERVER_PORT $TARGET_SERVER_HOST > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - ./make-envs.sh
    - pip3 install ansible
    - ansible-galaxy collection install community.docker
    - ansible-playbook
        -i ansible/inventory.yml ansible/playbook.yml
        --extra-vars version=$CI_COMMIT_REF_SLUG
        --extra-vars host_project_dir=$HOST_PROJECT_DIR
        --vault-password-file=$ANSIBLE_VAULT_PASSWORD
  environment:
    name: staging
    url: ''
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      variables:
        DEPLOY_ENV: "staging"
        TARGET_SERVER_HOST: "dev.cloudybay.com.tw"
        TARGET_SERVER_PORT: 61022
  tags:
    - gpu.cb
    - docker

# production:
#   extends: .production
